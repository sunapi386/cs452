#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CS452 A0 Documentation
\end_layout

\begin_layout Author
Jason Sun 20387090
\end_layout

\begin_layout Section
Program operation
\end_layout

\begin_layout Standard
To operate the program, first load the executable in redboot and execute
 it: 
\end_layout

\begin_layout Verbatim

load -b 0x0021800 -h 10.15.167.5 /u/cs452/tftp/ARM/j53sun/kernel.elf
\end_layout

\begin_layout Verbatim

go
\end_layout

\begin_layout Standard
Valid commands are:
\end_layout

\begin_layout Verbatim

tr train_number train_speed
\end_layout

\begin_layout Verbatim

rv train_number
\end_layout

\begin_layout Verbatim

sw switch_number switch_direction
\end_layout

\begin_layout Standard
To build it from source, go to cs452/kernel folder and run the makefile:
 
\end_layout

\begin_layout Verbatim

j53sun@ubuntu1204-004:~/cs452/kernel$ clear ; make libs && make clean &&
 make
\end_layout

\begin_layout Standard
This automatically builds and copies it to my directory
\end_layout

\begin_layout Verbatim

/u/cs452/tftp/ARM/j53sun/kernel.elf
\end_layout

\begin_layout Section
Program structure
\end_layout

\begin_layout Standard
Each pass of the polling loop:
\end_layout

\begin_layout Itemize
Checks the clock.
 It uses the 32 bit timer (timer 3).
 Every tenth of a second the clock is redrawn.
 The polling loop runs about 1600 times per tenth second under no load,
 and about 1500 times when holding down carriage return.
\end_layout

\begin_layout Itemize
Polls the train sensors for changes (incomplete functionality).
 Sends a new sensor data request when all data bytes from previous sensor
 data request have been received.
 The data is then put into a buffer, which is allocated on the stack.
 I have gotten sensor readings, but this breaks the sending of other commands.
\end_layout

\begin_layout Itemize
Checks the send buffer.
 Sends a character from the send buffer, if there are items in the buffer
 and it timing delay has been reached.
 Two different timing delays exist: 
\end_layout

\begin_deeper
\begin_layout Itemize
One for the display terminal (115200 baud).
 A delay of 10 loops are used.
 The ARM process operates at 200Mhz, and the serial is 115Khz.
 115/200,000=0.000575 bit over terminal per instruction, so 0.005 instruction
 per tenth second.
 Using 1500 loops per tenth second, 0.005 * 1500 = 7.5 CPU cycles as lower
 bound.
 
\end_layout

\begin_layout Itemize
One for the train controller (2400 baud).
 A delay of 1500 loops (roughly 0.1s) are used to make sure the train controller
 isn't overwhelmed with commands.
 115200 / 2400 = 48 times slower, we should send no more than 48 commands
 per second.
 1 / 48 = 0.02 and so waiting 5x longer should be enough.
\end_layout

\end_deeper
\begin_layout Itemize
Checks the receive buffer.
 If character is received, it is printed to terminal.
 User input is sent to be parsed if the user presses carriage return.
 Parsing validates the commands before filling the buffer to train with
 commands.
\end_layout

\begin_layout Subsection
Known bugs
\end_layout

\begin_layout Itemize
Backspace glitches when space is pressed and the user attempts to backspace
 the space.
 The way the input buffer is written is it simply tokenizes user's input
 based on spaces pressed.
 
\end_layout

\begin_layout Section
Source code location and md5 hashes
\end_layout

\begin_layout Standard
The root directory is 
\end_layout

\begin_layout Verbatim

/u1/j53sun/cs452 
\end_layout

\begin_layout Standard
And md5 hashes
\end_layout

\begin_layout Verbatim

55a8e491be14b5a6c2ab2c4e18dff3aa  kernel/kernel.a 
\end_layout

\begin_layout Verbatim

cde2e8ae7f7fd8be78167195ccab647a  kernel/kernel.c 
\end_layout

\begin_layout Verbatim

dd49706f2421250533861efb4b571884  kernel/kernel.h 
\end_layout

\begin_layout Verbatim

6898c4e700229324a782fb52577107c0  kernel/Makefile 
\end_layout

\begin_layout Verbatim

8f13fb8bede40fa7fa47de95f5bf4d8d  kernel/menu.c 
\end_layout

\begin_layout Verbatim

3920e98f9f3fd8d0acf74d6de6be1530  kernel/mysteps.txt 
\end_layout

\begin_layout Verbatim

9334189d105271131c9ba7b08a4215af  kernel/orex.ld 
\end_layout

\begin_layout Verbatim

d1bf2d35ebbb3eaf222de8edec6dc22e  kernel/timer.c
\end_layout

\begin_layout Verbatim

dba36a6a6d4aa0e4df9f55293e49476e  include/bool.h 
\end_layout

\begin_layout Verbatim

791a92535ef5baa9546ddc3de017db34  include/buffer.h 
\end_layout

\begin_layout Verbatim

d32dda3f6cd59b210c03d1ed8332c581  include/bwio.h 
\end_layout

\begin_layout Verbatim

c343907f259c821eb6f910d32ca325cd  include/circ_buffer.h 
\end_layout

\begin_layout Verbatim

87e9fe1c0b91c71156b20cb17d045b2d  include/menu.h 
\end_layout

\begin_layout Verbatim

3a55d4201635b4972cd319a4bbd5d6a9  include/screen.h 
\end_layout

\begin_layout Verbatim

2f9e34c2a1e730561ce059cf3694d690  include/termio.h 
\end_layout

\begin_layout Verbatim

c4b75907720d8d0c206f853a6b234f68  include/timer.h 
\end_layout

\begin_layout Verbatim

6a6bbef2cca529750f7084c90f1769f2  include/trains.h 
\end_layout

\begin_layout Verbatim

d5ae7a7af25c09b1ada872424e22c766  include/ts7200.h
\end_layout

\begin_layout Verbatim

6abec0cf31b762a695b5c23a223bbdcb  src/buffer.c 
\end_layout

\begin_layout Verbatim

88b4539f5cd0de2a8b055e30c06c7465  src/bwio.c 
\end_layout

\begin_layout Verbatim

53daf42ef0d841cf245afd53cfd405cd  src/commio.c 
\end_layout

\begin_layout Verbatim

e17ae063330185a3a0a51a66b0cf11da  src/Makefile 
\end_layout

\begin_layout Verbatim

de032abed4c3344dd8b3ec0f73bd1d20  src/menu.c 
\end_layout

\begin_layout Verbatim

a64100478c8fc0396e5073997cf7a31c  src/screen.c 
\end_layout

\begin_layout Verbatim

d3b035d2812ec7262eb731bfc93708d7  src/termio.c 
\end_layout

\begin_layout Verbatim

80f9969727b6b4133a1348fe47d74a9f  src/timer.c 
\end_layout

\begin_layout Verbatim

d9857544f07c77e962093a557b60c0c9  src/trains.c
\end_layout

\begin_layout Section
List of all files submitted
\end_layout

\begin_layout Standard
All the files in 3, plus this design document (pdf).
\end_layout

\begin_layout Section
Question answers
\end_layout

\begin_layout Subsection
Clock timing
\end_layout

\begin_layout Standard
Clock does not miss updates or lose time because the clock is updated every
 tenth of a second, and that gives the CPU about 1500 polling loop iterations.
 
\end_layout

\begin_layout Subsection
Hardware to reply to a sensor query
\end_layout

\begin_layout Standard
Hardware replies to sensor query is broken.
 I can read the sensor data, but that breaks my sending output and I think
 I'd rather submit without the bug that makes my program unable to control
 the trains.
\end_layout

\end_body
\end_document
